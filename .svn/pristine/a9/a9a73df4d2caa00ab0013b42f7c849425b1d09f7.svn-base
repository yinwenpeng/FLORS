package nlp.processing.features;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;

import nlp.model.UnlabeledDataset;
import nlp.processing.Features;
import nlp.stats.BigramFreqs;
import nlp.stats.UnigramFreqs;
import no.uib.cipr.matrix.VectorEntry;
import no.uib.cipr.matrix.sparse.SparseVector;

public class DistFeatures extends Features {
	private BigramFreqs bigrams;
	private UnigramFreqs unigrams;
	
	private ArrayList<String> featureNames;
	private int[] featureNameToId;
	private boolean useCutOffFeature = false;
		
	public DistFeatures(UnlabeledDataset data, int noOfFeatures, UnlabeledDataset representationSet) {
		this.bigrams = data.getBigrams();
		this.unigrams = data.getUnigrams();
		ArrayList<String> names = representationSet.getUnigrams().getNmostFrequentTokens(noOfFeatures);
		
		setFeatureNames(names);
	}
	
	public DistFeatures(UnlabeledDataset data) {
		this(data, data.getVocabularySize(), data);
	}
	
	public DistFeatures(UnlabeledDataset data, int noOfFeatures) {
		this(data, noOfFeatures, data);
	}

	private void setFeatureNames(ArrayList<String> newFeatureNames) {
		featureNames = newFeatureNames;
		featureNameToId = new int[unigrams.getVocabulary().size()];
		Arrays.fill(featureNameToId, -1);
		for (int i = 0; i < newFeatureNames.size(); i++) {
			featureNameToId[unigrams.translate(newFeatureNames.get(i))] =  i;
		}
		
		if (featureNames.size() < unigrams.getVocabulary().size()) {
			featureNames.add("<OTHER_CONTEXTS>");
			useCutOffFeature = true;
		}
	}
	
	@Override
	public Vector[] getFeatureVector(String token) {
		Vector[] result = {getLeftFeatureVector(token), getRightFeatureVector(token)};
		return result;
	}
	
	public Vector getLeftFeatureVector(String token) {
		if (unigrams.getVocabulary().contains(token))
			return convertToFeatureVector(bigrams.getLeftFrequencies(token));
		else
			return new Vector(0);
	}

	public Vector getRightFeatureVector(String token) {
		if (unigrams.getVocabulary().contains(token))
			return convertToFeatureVector(bigrams.getRightFrequencies(token));
		else
			return new Vector(0);
	}
	public Vector convertToFeatureVector(SparseVector sparseVector) {
		if (useCutOffFeature) {
			return constructReducedVector(sparseVector);
		} else {
			return constructFullVector(sparseVector);
		}
	}
		
	public Vector constructReducedVector(SparseVector sparseVector) {
		ArrayList<Integer> indices = new ArrayList<Integer>();
		ArrayList<Integer> values = new ArrayList<Integer>();
		
		Iterator<VectorEntry> iterator = sparseVector.iterator();
		int cutOffValues = 0;
		
		while (iterator.hasNext()) {
			VectorEntry entry = iterator.next();
			int featureId =featureNameToId[entry.index()];
			if (featureId == -1) {
				cutOffValues += entry.get();
			} else {
				indices.add(featureNameToId[entry.index()]);
				values.add((int)entry.get());
			}
		}
		if (cutOffValues > 0.0d) {
			indices.add(featureNames.size() - 1);
			values.add(cutOffValues);
		}
		return new Vector(indices, values);
	}
	
	
	public Vector constructFullVector(SparseVector sparseVector) {
		Vector result = new Vector(sparseVector.getUsed());
		
		Iterator<VectorEntry> iterator = sparseVector.iterator();
		int index = 0;

		while (iterator.hasNext()) {
			VectorEntry entry = iterator.next();

			result.indices[index]= featureNameToId[entry.index()];
			result.values[index]= (int) entry.get();
			index++;
		}
		
		return result;
	}
	
	@Override
	public int getNoOfGeneratedVectors() {
		return 2;
	}
	
	public String[][] getFeatureNames(String pos) {
		String[][] both = new String[2][0];
		both[0]=getLeftFeatureNames(pos);
		both[1]=getRightFeatureNames(pos);
		
		return both;
	}
	
	public String[] getLeftFeatureNames(String pos) {
		return rename(featureNames.toArray(new String[featureNames.size()]),"","{l|" + pos + "}");
	}
	
	public String[] getRightFeatureNames(String pos) {
		return rename(featureNames.toArray(new String[featureNames.size()]),"","{r|" + pos + "}");
	}	
}